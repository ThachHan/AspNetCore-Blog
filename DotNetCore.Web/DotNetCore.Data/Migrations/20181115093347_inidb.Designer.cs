// <auto-generated />
using System;
using DotNetCore.Data.DbManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotNetCore.Data.Migrations
{
    [DbContext(typeof(EntityCoreContext))]
    [Migration("20181115093347_inidb")]
    partial class inidb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("DotNetCore.Data.Entity.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.Property<string>("UserName");

                    b.Property<string>("WorkPlace");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.AccountRoleMap", b =>
                {
                    b.Property<int>("AccountId");

                    b.Property<int>("RoleId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoleMap");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.Advertisement", b =>
                {
                    b.Property<int>("AdId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BannerUrl");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<DateTime?>("DateExpired");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Link");

                    b.Property<int>("Position");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("AdId");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BannerUrl");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("FacebookLink");

                    b.Property<string>("FirstName");

                    b.Property<string>("GoogleLink");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("InstagramLink");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Summary");

                    b.Property<string>("TwitterLink");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BannerUrl");

                    b.Property<int?>("CategoryLayoutId");

                    b.Property<int?>("CategoryParentId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsShowBotMenu");

                    b.Property<bool>("IsShowTopMenu");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.CategoryLayout", b =>
                {
                    b.Property<int>("CategoryLayoutId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryLayoutName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("CategoryLayoutId");

                    b.ToTable("CategoryLayout");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<int>("ContentId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<int>("CommentParentId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<string>("BannerUrl");

                    b.Property<string>("Body");

                    b.Property<int>("Counter");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsAllowComment");

                    b.Property<bool>("IsShowBanner");

                    b.Property<int>("PostStatus");

                    b.Property<string>("Source");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("ContentId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.ContentCategoryMap", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("ContentId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("CategoryId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentCategoryMap");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.ContentTagMap", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("ContentId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("TagId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentTagMap");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.DefineRouting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<int>("EntityId");

                    b.Property<string>("FriendlyUrlLv1");

                    b.Property<string>("FriendlyUrlLv2");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("DefineRouting");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("RoleName");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.Subscribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("Email");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Subscribe");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.SystemParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("Description");

                    b.Property<string>("SystemParameterName");

                    b.Property<string>("SystemParameterValue");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("SystemParameter");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("TagName");

                    b.Property<string>("TagUrl");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.AccountRoleMap", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DotNetCore.Data.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.ContentCategoryMap", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DotNetCore.Data.Entity.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotNetCore.Data.Entity.ContentTagMap", b =>
                {
                    b.HasOne("DotNetCore.Data.Entity.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DotNetCore.Data.Entity.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
